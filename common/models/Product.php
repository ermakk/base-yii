<?php

namespace common\models;

use ermakk\changelog\models\ActiveRecord;
//use yarcode\eav\models\Attribute;
//use yarcode\eav\models\AttributeValue;
use Yii;
use yii\helpers\BaseInflector;

/**
 * This is the model class for table "product".
 *
 * @property int $id Идентификтор
 * @property string $title Название
 * @property string $code Символьный код
 * @property string|null $artikul Артикул
 * @property string|null $text Описание
 * @property int|null $category_id Категория
 * @property int|null $type_id Тип
 *
 * @property ProductCategory $category
 * @property ProductPrice[] $productPrices
 * @property ProductReceipt[] $productReceipts
 * @property ProductReview[] $productReviews
 * @property ProductType $type
 */
class Product extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product';
    }
//    public function load($data, $formName = null)
//    {
//        if(isset($data['Product'])) {
//            if($data['Product']['code'] == '') {
//                $data['Product']['code'] = BaseInflector::slug($data['Product']['title']);
//            }
//        }
//        return parent::load($data, $formName); // TODO: Change the autogenerated stub
//    }


    public function beforeValidate()
    {
        if ($this->code == '') {
            $this->code = BaseInflector::slug($this->title);
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['category_id', 'type_id'], 'integer'],
            [['title', 'code', 'artikul', 'text', 'code'], 'string', 'max' => 255],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductCategory::class, 'targetAttribute' => ['category_id' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::class, 'targetAttribute' => ['type_id' => 'id']],
//            [['color'], 'string', 'max' => 255], // Attribute field
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'Идентификтор',
            'title' => 'Название',
            'code' => 'Символьный код',
            'artikul' => 'Артикул',
            'text' => 'Описание',
            'category_id' => 'Категория',
            'type_id' => 'Тип',
        ];
    }


    public function behaviors()
    {
        return [
            [
                'class' => \yarcode\eav\EavBehavior::className(),
                'valueClass' => ObjectAttributeValue::className(),
            ],
        ];
    }

    /**
     * @return yii\db\ActiveQuery
     */
    public function getEavAttributes()
    {
//        $query = ObjectAttribute::find()->where(['categoryId' => $this->category_id]);
        $query = $this->hasMany(ObjectAttribute::className(), ['categoryId' => 'parentCategoryList']);
//        var_dump($query); die;
        $query->multiple = true;
        return $query;
    }



    /**
     * Gets query for [[Category]].
     *
     * @return \yii\db\ActiveQuery|ProductCategoryQuery
     */
    public function getCategory()
    {
        return $this->hasOne(ProductCategory::class, ['id' => 'category_id']);
    }

    /**
     * Функция возвращает массив идентификаторов категорий от текущей до родительской
     *
     * @return int[]|null[]
     */
    public function getParentCategoryList(){
        $parent_category = $this->category->hasOne(ProductCategory::class, ['id' => 'parent_id'])->one(); /** @var ProductCategory $parent_category **/
        $res = [$this->category_id];
        while ($parent_category !== null){
            $res[] = $parent_category->id;
            $parent_category = $parent_category->parent;
        }
//        var_dump($res); die;
        return $res;
    }


    /**
     * Проверяет является ли идентифкатор категории наследственным
     * Gets query for [[Category]].
     *
     * @return \yii\db\ActiveQuery|ProductCategoryQuery
     */
    public function checkCategory($category_id)
    {
        return $this->hasOne(ProductCategory::class, ['in', 'id', $this->getParentCategoryList()]);
    }

    /**
     * Gets query for [[ProductPrices]].
     *
     * @return \yii\db\ActiveQuery|ProductPriceQuery
     */
    public function getProductPrices()
    {
        return $this->hasMany(ProductPrice::class, ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductReceipts]].
     *
     * @return \yii\db\ActiveQuery|ProductReceiptQuery
     */
    public function getProductReceipts()
    {
        return $this->hasMany(ProductReceipt::class, ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductReviews]].
     *
     * @return \yii\db\ActiveQuery|ProductReviewQuery
     */
    public function getProductReviews()
    {
        return $this->hasMany(ProductReview::class, ['product_id' => 'id']);
    }

    /**
     * Gets query for [[Type]].
     *
     * @return \yii\db\ActiveQuery|yii\db\ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(ProductType::class, ['id' => 'type_id']);
    }

    /**
     * {@inheritdoc}
     * @return ProductQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ProductQuery(get_called_class());
    }


}
