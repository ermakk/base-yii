<?php

namespace common\models;

use ermakk\changelog\models\ActiveRecord;
use Yii;

/**
 * This is the model class for table "product_category".
 *
 * @property int $id Идентификтор
 * @property string $title Название
 * @property string $code Символьный код
 * @property string|null $comment Комментарий
 * @property int|null $parent_id Родительская категория
 *
 * @property ProductCategory $parent
 * @property ProductCategory[] $productCategories
 * @property Product[] $products
 */
class ProductCategory extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product_category';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'code'], 'required'],
            [['parent_id'], 'integer'],
            [['title', 'code', 'comment', 'parentName'], 'string', 'max' => 255],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductCategory::class, 'targetAttribute' => ['parent_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'Идентификтор',
            'title' => 'Название',
            'code' => 'Символьный код',
            'comment' => 'Комментарий',
            'parent_id' => 'Родительская категория',
            'parentName' => 'Родительская категория',
        ];
    }

    public function beforeValidate()
    {
        if (self::findAll(''))
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[Parent]].
     *
     * @return \yii\db\ActiveQuery|ProductCategoryQuery
     */
    public function getParent()
    {
        return $this->hasOne(ProductCategory::class, ['id' => 'parent_id']);
    }
    /**
     * Gets query for [[Childs]].
     *
     * @return \yii\db\ActiveQuery|ProductCategoryQuery
     */
    public function getChilds()
    {
        return $this->hasMany(ProductCategory::class, ['parent_id' => 'id']);
    }
    /**
     * Gets query for [[Childs]].
     *
     * @return \yii\db\ActiveQuery|ProductCategoryQuery
     */
    public function getChildsRecursive()
    {
        $res = [];
        $res[] = $this->id;
        if ($this->isChilds){
            foreach ($this->childs as $child) {
                $res[] = $child->id;
                $childs = $child->childs;
                foreach ($childs as $chd) {
                    $res[] = array_merge($res, $chd->getChildsRecursive());
                }

            }
        }

        return $res;
    }
    public function getIsChilds()
    {
        return $this->hasMany(ProductCategory::class, ['parent_id' => 'id'])->count();
    }

    /**
     * Gets query for [[ProductCategories]].
     *
     * @return \yii\db\ActiveQuery|ProductCategoryQuery
     */
    public function getProductCategories()
    {
        return $this->hasMany(ProductCategory::class, ['parent_id' => 'id']);
    }

    /**
     * Gets query for [[Products]].
     *
     * @return \yii\db\ActiveQuery|ProductQuery
     */
    public function getProducts()
    {
        return Product::find()->where(['category_id' => array_values($this->getChildsRecursive())])->all();
//        return $this->hasMany(Product::class, ['category_id' => 'id']);
    }



    public function getNavCatList($id = null, $level = 1, $maxLevel = 2)
    {
        $res = [];
        $categs = ProductCategory::findAll(['parent_id' => $id]);

        foreach ($categs as $categ){
            if ($level <= $maxLevel) {
                if (!$categ->isChilds) {
                    $res[] = ['label' => $categ->title, 'options' => ['id' => 'down_'.$categ->code], 'url' => ['/product/category/' . $categ->code]];
                } else {
                    $res[] = [
                        'label' => $categ->title,
                        'url' => ['/product/category/' . $categ->code],
                        'template' => '<a href="{url}" >{label}<i class="fa fa-angle-left pull-right"></i></a>',
                        'items' => $this->getNavCatList($categ->id, $level + 1),
                    ];
                }
            }
        }


        return $res;
    }

    /**
     * @return string
     */
    public function getParentName(){
        if ($this->parent) {
            return $this->parent->title;
        } else {
            return '';
        }
    }

    /**
     * {@inheritdoc}
     * @return ProductCategoryQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ProductCategoryQuery(get_called_class());
    }
}
